{"version":3,"sources":["bizcharts-charts/src/code-chunks.js","recharts-charts/src/code-chunks.js","chartjs-charts/src/code-chunks.js","d3-charts/src/code-chunks.js","codegen.js","ChartContainer.js","recharts-charts/src/components/ChartRenderer.js","bizcharts-charts/src/components/ChartRenderer.js","d3-charts/src/components/ChartRenderer.js","chartjs-charts/src/components/ChartRenderer.js","App.js","reportWebVitals.js","index.js"],"names":["imports","getChartComponent","chartType","getCommon","getImports","chunksByLibrary","bizchartsCharts","rechartsCharts","chartjsCharts","d3Charts","commonDependencies","getCodesandboxFiles","chartingLibrary","query","pivotConfig","cubejsToken","apiUrl","join","getDependencies","map","i","match","cubejsApi","cubejs","ChartRenderer","renderFunction","renderProps","useCubeQuery","resultSet","ChartContainer","CartesianChart","children","ChartComponent","width","height","data","chartPivot","dataKey","colors","TypeToChartComponent","line","LineChart","seriesNames","series","stackId","key","name","title","stroke","bar","BarChart","fill","area","AreaChart","pie","isAnimationActive","nameKey","e","index","length","number","type","justify","align","style","s","value","totalRow","table","pagination","columns","tableColumns","dataSource","tablePivot","stackedChartData","pivot","xValues","yValuesArray","yValues","m","x","axisValuesString","color","measure","Number","parseFloat","reduce","a","b","concat","scale","tickCount","forceFit","crosshairs","position","size","radius","COLORS_SERIES","CHART_HEIGHT","drawPieChart","node","options","data_ready","d3","html","svg","append","attr","clientWidth","selectAll","enter","innerRadius","outerRadius","d","labels","text","D3Chart","props","ref","el","margin","top","right","bottom","left","maxData","keys","values","domain","range","c","padding","nice","call","y","y0","y1","bandwidth","drawChart","libs","recharts","RechartsCharts","bizcharts","BizchartsCharts","D3Charts","chartjs","categories","category","datasets","label","r","borderColor","backgroundColor","scales","xAxes","stacked","yAxes","hoverBackgroundColor","App","useState","setQuery","setPivotConfig","library","setLibrary","setChartType","useEffect","window","dispatchEvent","CustomEvent","addEventListener","event","detail","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.bca47774.chunk.js","sourcesContent":["\n    const imports = [\"import React from 'react';\",\"import { Chart, Axis, Tooltip, Geom, Coord, Legend } from 'bizcharts';\",\"import { Row, Col, Statistic, Table } from 'antd';\"];\n    \n    export function getChartComponent(chartType) {\n      \n      if (chartType === 'line') {\n        return `return (\n  <Chart\n    scale={{\n      x: {\n        tickCount: 8,\n      },\n    }}\n    height={400}\n    data={stackedChartData(resultSet)}\n    forceFit\n  >\n    <Axis name=\"x\" />\n    <Axis name=\"measure\" />\n    <Tooltip\n      crosshairs={{\n        type: 'y',\n      }}\n    />\n    <Geom type=\"line\" position=\"x*measure\" size={2} color=\"color\" />\n  </Chart>\n);\n`;\n      }\n    \n\n      if (chartType === 'x') {\n        return ``;\n      }\n    \n\n      if (chartType === 'tickCount') {\n        return ``;\n      }\n    \n\n      if (chartType === 'type') {\n        return ``;\n      }\n    \n\n      if (chartType === 'bar') {\n        return `return (\n  <Chart\n    scale={{\n      x: {\n        tickCount: 8,\n      },\n    }}\n    height={400}\n    data={stackedChartData(resultSet)}\n    forceFit\n  >\n    <Axis name=\"x\" />\n    <Axis name=\"measure\" />\n    <Tooltip />\n    <Geom type=\"interval\" position=\"x*measure\" color=\"color\" />\n  </Chart>\n);\n`;\n      }\n    \n\n      if (chartType === 'x') {\n        return ``;\n      }\n    \n\n      if (chartType === 'tickCount') {\n        return ``;\n      }\n    \n\n      if (chartType === 'area') {\n        return `return (\n  <Chart\n    scale={{\n      x: {\n        tickCount: 8,\n      },\n    }}\n    height={400}\n    data={stackedChartData(resultSet)}\n    forceFit\n  >\n    <Axis name=\"x\" />\n    <Axis name=\"measure\" />\n    <Tooltip\n      crosshairs={{\n        type: 'y',\n      }}\n    />\n    <Geom type=\"area\" position=\"x*measure\" size={2} color=\"color\" />\n  </Chart>\n);\n`;\n      }\n    \n\n      if (chartType === 'x') {\n        return ``;\n      }\n    \n\n      if (chartType === 'tickCount') {\n        return ``;\n      }\n    \n\n      if (chartType === 'type') {\n        return ``;\n      }\n    \n\n      if (chartType === 'pie') {\n        return `return (\n  <Chart height={400} data={resultSet.chartPivot()} forceFit>\n    <Coord type=\"theta\" radius={0.75} />\n    {resultSet.seriesNames().map((s) => (\n      <Axis name={s.key} />\n    ))}\n    <Legend position=\"right\" />\n    <Tooltip />\n    {resultSet.seriesNames().map((s) => (\n      <Geom type=\"interval\" position={s.key} color=\"category\" />\n    ))}\n  </Chart>\n);\n`;\n      }\n    \n\n      if (chartType === 'height') {\n        return ``;\n      }\n    \n    }\n    \n    export function getCommon() {\n      return `const stackedChartData = (resultSet) => {\n  const data = resultSet\n    .pivot()\n    .map(({ xValues, yValuesArray }) =>\n      yValuesArray.map(([yValues, m]) => ({\n        x: resultSet.axisValuesString(xValues, ', '),\n        color: resultSet.axisValuesString(yValues, ', '),\n        measure: m && Number.parseFloat(m),\n      }))\n    )\n    .reduce((a, b) => a.concat(b), []);\n  return data;\n};\n`;\n    }\n    \n    export function getImports() {\n      return imports;\n    }\n  ","\n    const imports = [\"import React from 'react';\",\"import { CartesianGrid, PieChart, Pie, Cell, AreaChart, Area, XAxis, YAxis, Tooltip, ResponsiveContainer, Legend, BarChart, Bar, LineChart, Line } from 'recharts';\",\"import { Row, Col, Statistic, Table } from 'antd';\"];\n    \n    export function getChartComponent(chartType) {\n      \n      if (chartType === 'line') {\n        return `return (\n  <CartesianChart resultSet={resultSet} ChartComponent={LineChart}>\n    {resultSet.seriesNames().map((series, i) => (\n      <Line\n        key={series.key}\n        stackId=\"a\"\n        dataKey={series.key}\n        name={series.title}\n        stroke={colors[i]}\n      />\n    ))}\n  </CartesianChart>\n);\n`;\n      }\n    \n\n      if (chartType === 'bar') {\n        return `return (\n  <CartesianChart resultSet={resultSet} ChartComponent={BarChart}>\n    {resultSet.seriesNames().map((series, i) => (\n      <Bar\n        key={series.key}\n        stackId=\"a\"\n        dataKey={series.key}\n        name={series.title}\n        fill={colors[i]}\n      />\n    ))}\n  </CartesianChart>\n);\n`;\n      }\n    \n\n      if (chartType === 'area') {\n        return `return (\n  <CartesianChart resultSet={resultSet} ChartComponent={AreaChart}>\n    {resultSet.seriesNames().map((series, i) => (\n      <Area\n        key={series.key}\n        stackId=\"a\"\n        dataKey={series.key}\n        name={series.title}\n        stroke={colors[i]}\n        fill={colors[i]}\n      />\n    ))}\n  </CartesianChart>\n);\n`;\n      }\n    \n\n      if (chartType === 'pie') {\n        return `return (\n  <ResponsiveContainer width=\"100%\" height={350}>\n    <PieChart>\n      <Pie\n        isAnimationActive={false}\n        data={resultSet.chartPivot()}\n        nameKey=\"x\"\n        dataKey={resultSet.seriesNames()[0].key}\n        fill=\"#8884d8\"\n      >\n        {resultSet.chartPivot().map((e, index) => (\n          <Cell key={index} fill={colors[index % colors.length]} />\n        ))}\n      </Pie>\n      <Legend />\n      <Tooltip />\n    </PieChart>\n  </ResponsiveContainer>\n);\n`;\n      }\n    \n\n      if (chartType === 'height') {\n        return ``;\n      }\n    \n    }\n    \n    export function getCommon() {\n      return `const CartesianChart = ({ resultSet, children, ChartComponent }) => (\n  <ResponsiveContainer width=\"100%\" height={350}>\n    <ChartComponent data={resultSet.chartPivot()}>\n      <XAxis dataKey=\"x\" />\n      <YAxis />\n      <CartesianGrid />\n      {children}\n      <Legend />\n      <Tooltip />\n    </ChartComponent>\n  </ResponsiveContainer>\n);\n\nconst colors = ['#FF6492', '#141446', '#7A77FF'];\n\nconst stackedChartData = (resultSet) => {\n  const data = resultSet\n    .pivot()\n    .map(({ xValues, yValuesArray }) =>\n      yValuesArray.map(([yValues, m]) => ({\n        x: resultSet.axisValuesString(xValues, ', '),\n        color: resultSet.axisValuesString(yValues, ', '),\n        measure: m && Number.parseFloat(m),\n      }))\n    )\n    .reduce((a, b) => a.concat(b), []);\n  return data;\n};\n`;\n    }\n    \n    export function getImports() {\n      return imports;\n    }\n  ","\n    const imports = [\"import React from 'react';\",\"import { Line, Bar, Pie } from 'react-chartjs-2';\",\"import { Row, Col, Statistic, Table } from 'antd';\"];\n    \n    export function getChartComponent(chartType) {\n      \n      if (chartType === 'line') {\n        return `const data = {\n  labels: resultSet.categories().map((c) => c.category),\n  datasets: resultSet.series().map((s, index) => ({\n    label: s.title,\n    data: s.series.map((r) => r.value),\n    borderColor: COLORS_SERIES[index],\n    fill: false,\n  })),\n};\nconst options = {};\nreturn <Line data={data} options={options} />;\n`;\n      }\n    \n\n      if (chartType === 'labels') {\n        return ``;\n      }\n    \n\n      if (chartType === 'datasets') {\n        return ``;\n      }\n    \n\n      if (chartType === 'label') {\n        return ``;\n      }\n    \n\n      if (chartType === 'data') {\n        return ``;\n      }\n    \n\n      if (chartType === 'borderColor') {\n        return ``;\n      }\n    \n\n      if (chartType === 'fill') {\n        return ``;\n      }\n    \n\n      if (chartType === 'bar') {\n        return `const data = {\n  labels: resultSet.categories().map((c) => c.category),\n  datasets: resultSet.series().map((s, index) => ({\n    label: s.title,\n    data: s.series.map((r) => r.value),\n    backgroundColor: COLORS_SERIES[index],\n    fill: false,\n  })),\n};\nconst options = {\n  scales: {\n    xAxes: [\n      {\n        stacked: true,\n      },\n    ],\n  },\n};\nreturn <Bar data={data} options={options} />;\n`;\n      }\n    \n\n      if (chartType === 'labels') {\n        return ``;\n      }\n    \n\n      if (chartType === 'datasets') {\n        return ``;\n      }\n    \n\n      if (chartType === 'label') {\n        return ``;\n      }\n    \n\n      if (chartType === 'data') {\n        return ``;\n      }\n    \n\n      if (chartType === 'backgroundColor') {\n        return ``;\n      }\n    \n\n      if (chartType === 'fill') {\n        return ``;\n      }\n    \n\n      if (chartType === 'scales') {\n        return ``;\n      }\n    \n\n      if (chartType === 'xAxes') {\n        return ``;\n      }\n    \n\n      if (chartType === 'stacked') {\n        return ``;\n      }\n    \n\n      if (chartType === 'area') {\n        return `const data = {\n  labels: resultSet.categories().map((c) => c.category),\n  datasets: resultSet.series().map((s, index) => ({\n    label: s.title,\n    data: s.series.map((r) => r.value),\n    backgroundColor: COLORS_SERIES[index],\n  })),\n};\nconst options = {\n  scales: {\n    yAxes: [\n      {\n        stacked: true,\n      },\n    ],\n  },\n};\nreturn <Line data={data} options={options} />;\n`;\n      }\n    \n\n      if (chartType === 'labels') {\n        return ``;\n      }\n    \n\n      if (chartType === 'datasets') {\n        return ``;\n      }\n    \n\n      if (chartType === 'label') {\n        return ``;\n      }\n    \n\n      if (chartType === 'data') {\n        return ``;\n      }\n    \n\n      if (chartType === 'backgroundColor') {\n        return ``;\n      }\n    \n\n      if (chartType === 'scales') {\n        return ``;\n      }\n    \n\n      if (chartType === 'yAxes') {\n        return ``;\n      }\n    \n\n      if (chartType === 'stacked') {\n        return ``;\n      }\n    \n\n      if (chartType === 'pie') {\n        return `const data = {\n  labels: resultSet.categories().map((c) => c.category),\n  datasets: resultSet.series().map((s) => ({\n    label: s.title,\n    data: s.series.map((r) => r.value),\n    backgroundColor: COLORS_SERIES,\n    hoverBackgroundColor: COLORS_SERIES,\n  })),\n};\nconst options = {};\nreturn <Pie data={data} options={options} />;\n`;\n      }\n    \n\n      if (chartType === 'labels') {\n        return ``;\n      }\n    \n\n      if (chartType === 'datasets') {\n        return ``;\n      }\n    \n\n      if (chartType === 'label') {\n        return ``;\n      }\n    \n\n      if (chartType === 'data') {\n        return ``;\n      }\n    \n\n      if (chartType === 'backgroundColor') {\n        return ``;\n      }\n    \n\n      if (chartType === 'hoverBackgroundColor') {\n        return ``;\n      }\n    \n\n      if (chartType === 'height') {\n        return ``;\n      }\n    \n    }\n    \n    export function getCommon() {\n      return `const COLORS_SERIES = ['#FF6492', '#141446', '#7A77FF'];\n`;\n    }\n    \n    export function getImports() {\n      return imports;\n    }\n  ","\n    const imports = [\"import React from 'react';\",\"import * as d3 from 'd3';\",\"import { Row, Col, Statistic, Table } from 'antd';\"];\n    \n    export function getChartComponent(chartType) {\n      \n      if (chartType === 'line') {\n        return `return <D3Chart type=\"line\" {...props} />;\n`;\n      }\n    \n\n      if (chartType === 'bar') {\n        return `return <D3Chart type=\"bar\" {...props} />;\n`;\n      }\n    \n\n      if (chartType === 'area') {\n        return `return <D3Chart type=\"area\" {...props} />;\n`;\n      }\n    \n\n      if (chartType === 'pie') {\n        return `return <D3Chart type=\"pie\" {...props} />;\n`;\n      }\n    \n\n      if (chartType === 'height') {\n        return ``;\n      }\n    \n    }\n    \n    export function getCommon() {\n      return `const COLORS_SERIES = [\n  '#7A77FF',\n  '#141446',\n  '#FF6492',\n  '#727290',\n  '#43436B',\n  '#BEF3BE',\n  '#68B68C',\n  '#FFE7AA',\n  '#B2A58D',\n  '#64C8E0',\n];\nconst CHART_HEIGHT = 300;\n\nconst drawPieChart = (node, resultSet, options) => {\n  const data = resultSet.series()[0].series.map((s) => s.value);\n  const data_ready = d3.pie()(data);\n  d3.select(node).html(''); // The radius of the pieplot is half the width or half the height (smallest one).\n\n  const radius = CHART_HEIGHT / 2 - 40; // Seprate container to center align pie chart\n\n  const svg = d3\n    .select(node)\n    .append('svg')\n    .attr('width', node.clientWidth)\n    .attr('height', CHART_HEIGHT)\n    .append('g')\n    .attr(\n      'transform',\n      'translate(' + node.clientWidth / 2 + ',' + CHART_HEIGHT / 2 + ')'\n    );\n  svg\n    .selectAll('pieArcs')\n    .data(data_ready)\n    .enter()\n    .append('path')\n    .attr('d', d3.arc().innerRadius(0).outerRadius(radius))\n    .attr('fill', (d) => COLORS_SERIES[d.index]);\n  const size = 12;\n  const labels = resultSet.series()[0].series.map((s) => s.x);\n  svg\n    .selectAll('myrect')\n    .data(labels)\n    .enter()\n    .append('rect')\n    .attr('x', 150)\n    .attr('y', function (d, i) {\n      return -50 + i * (size + 5);\n    })\n    .attr('width', size)\n    .attr('height', size)\n    .style('fill', (d, i) => COLORS_SERIES[i]);\n  svg\n    .selectAll('mylabels')\n    .data(labels)\n    .enter()\n    .append('text')\n    .attr('x', 150 + size * 1.2)\n    .attr('y', function (d, i) {\n      return -50 + i * (size + 5) + size / 2;\n    })\n    .text(function (d) {\n      return d;\n    })\n    .attr('text-anchor', 'left')\n    .attr('font-size', '12px')\n    .style('alignment-baseline', 'middle');\n};\n\nconst drawChart = (node, resultSet, chartType, options = {}) => {\n  if (chartType === 'pie') {\n    return drawPieChart(node, resultSet, options);\n  }\n\n  const margin = {\n      top: 10,\n      right: 30,\n      bottom: 30,\n      left: 60,\n    },\n    width = node.clientWidth - margin.left - margin.right,\n    height = CHART_HEIGHT - margin.top - margin.bottom;\n  d3.select(node).html('');\n  const svg = d3\n    .select(node)\n    .append('svg')\n    .attr('width', width + margin.left + margin.right)\n    .attr('height', height + margin.top + margin.bottom)\n    .append('g')\n    .attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n  const keys = resultSet.seriesNames(options.pivotConfig).map((s) => s.key);\n  let data, maxData;\n\n  if (chartType === 'line') {\n    data = resultSet.series(options.pivotConfig).map((series) => ({\n      key: series.key,\n      values: series.series,\n    }));\n    maxData = d3.max(data.map((s) => d3.max(s.values, (i) => i.value)));\n  } else {\n    data = d3.stack().keys(keys)(resultSet.chartPivot(options.pivotConfig));\n    maxData = d3.max(data.map((s) => d3.max(s, (i) => i[1])));\n  }\n\n  const color = d3.scaleOrdinal().domain(keys).range(COLORS_SERIES);\n  let x;\n\n  if (chartType === 'bar') {\n    x = d3\n      .scaleBand()\n      .range([0, width])\n      .domain(resultSet.chartPivot(options.pivotConfig).map((c) => c.x))\n      .padding(0.3);\n  } else {\n    x = d3\n      .scaleTime()\n      .domain(\n        d3.extent(resultSet.chartPivot(options.pivotConfig), (c) =>\n          d3.isoParse(c.x)\n        )\n      )\n      .nice()\n      .range([0, width]);\n  }\n\n  svg\n    .append('g')\n    .attr('transform', 'translate(0,' + height + ')')\n    .call(d3.axisBottom(x));\n  const y = d3.scaleLinear().domain([0, maxData]).range([height, 0]);\n  svg.append('g').call(d3.axisLeft(y));\n\n  if (chartType === 'line') {\n    svg\n      .selectAll('.line')\n      .data(data)\n      .enter()\n      .append('path')\n      .attr('fill', 'none')\n      .attr('stroke', (d) => color(d.key))\n      .attr('stroke-width', 1.5)\n      .attr('d', (d) => {\n        return d3\n          .line()\n          .x((d) => x(d3.isoParse(d.x)))\n          .y((d) => y(+d.value))(d.values);\n      });\n  } else if (chartType === 'area') {\n    svg\n      .selectAll('mylayers')\n      .data(data)\n      .enter()\n      .append('path')\n      .style('fill', (d) => color(d.key))\n      .attr(\n        'd',\n        d3\n          .area()\n          .x((d) => x(d3.isoParse(d.data.x)))\n          .y0((d) => y(d[0]))\n          .y1((d) => y(d[1]))\n      );\n  } else {\n    svg\n      .append('g')\n      .selectAll('g') // Enter in the stack data = loop key per key = group per group\n      .data(data)\n      .enter()\n      .append('g')\n      .attr('fill', (d) => color(d.key))\n      .selectAll('rect') // enter a second time = loop subgroup per subgroup to add all rectangles\n      .data((d) => d)\n      .enter()\n      .append('rect')\n      .attr('x', (d) => x(d.data.x))\n      .attr('y', (d) => y(d[1]))\n      .attr('height', (d) => y(d[0]) - y(d[1]))\n      .attr('width', x.bandwidth());\n  }\n};\n\nconst D3Chart = ({ resultSet, type, ...props }) => (\n  <div ref={(el) => el && drawChart(el, resultSet, type, props)} />\n);\n`;\n    }\n    \n    export function getImports() {\n      return imports;\n    }\n  ","import * as bizchartsCharts from './bizcharts-charts/src/code-chunks';\nimport * as rechartsCharts from './recharts-charts/src/code-chunks';\nimport * as chartjsCharts from './chartjs-charts/src/code-chunks';\nimport * as d3Charts from './d3-charts/src/code-chunks';\nconst chunksByLibrary = {\n  bizchartsCharts,\n  rechartsCharts,\n  chartjsCharts,\n  d3Charts,\n};\nconst commonDependencies = [\n  'react-dom',\n  '@cubejs-client/core',\n  '@cubejs-client/react',\n  'antd',\n];\nexport function getCodesandboxFiles(\n  chartingLibrary,\n  { query, pivotConfig, chartType, cubejsToken, apiUrl }\n) {\n  const { getCommon, getImports, getChartComponent } = chunksByLibrary[\n    `${chartingLibrary}Charts`\n  ];\n  return {\n    'index.js': `import ReactDOM from 'react-dom';\nimport cubejs from '@cubejs-client/core';\nimport { QueryRenderer } from '@cubejs-client/react';\nimport { Spin } from 'antd';\nimport 'antd/dist/antd.css';\n${getImports().join('\\n')}\n\n${getCommon()}\n\nconst cubejsApi = cubejs(\n  '${cubejsToken}',\n  { apiUrl: '${apiUrl}' }\n);\n\nconst renderChart = ({ resultSet, error, pivotConfig }) => {\n  if (error) {\n    return <div>{error.toString()}</div>;\n  }\n\n  if (!resultSet) {\n    return <Spin />;\n  }\n\n  ${getChartComponent(chartType)}\n};\n\nconst ChartRenderer = () => {\n  return (\n    <QueryRenderer\n      query={${query}}\n      cubejsApi={cubejsApi}\n      resetResultSetOnChange={false}\n      render={(props) => renderChart({\n        ...props,\n        pivotConfig: ${pivotConfig}\n      })}\n    />\n  );\n};\n\nconst rootElement = document.getElementById('root');\nReactDOM.render(<ChartRenderer />, rootElement);\n      `,\n  };\n}\nexport function getDependencies(chartingLibrary) {\n  const { getImports } = chunksByLibrary[`${chartingLibrary}Charts`];\n  return [\n    ...commonDependencies,\n    ...getImports().map((i) => {\n      const [, pkg] = i.match(/['\"]([^'\"]+)['\"]/);\n      return pkg;\n    }),\n  ];\n}\n","import cubejs from '@cubejs-client/core';\nimport { CubeProvider, useCubeQuery } from '@cubejs-client/react';\nimport { Spin } from 'antd';\nconst API_URL = 'http://localhost:4000/cubejs-api/v1';\nconst CUBEJS_TOKEN = 'secret';\nconst cubejsApi = cubejs(CUBEJS_TOKEN, {\n  apiUrl: API_URL,\n});\n\nconst ChartRenderer = ({ renderFunction, query, pivotConfig }) => {\n  const renderProps = useCubeQuery(query);\n\n  if (!renderProps.resultSet) {\n    return <Spin />;\n  }\n\n  return renderFunction({ ...renderProps, pivotConfig });\n};\n\nconst ChartContainer = ({ renderFunction, query, pivotConfig = null }) => {\n  return (\n    <CubeProvider cubejsApi={cubejsApi}>\n      <ChartRenderer\n        renderFunction={renderFunction}\n        query={query}\n        pivotConfig={pivotConfig}\n      />\n    </CubeProvider>\n  );\n};\n\nexport default ChartContainer;\n","import React from 'react';\nimport {\n  CartesianGrid,\n  PieChart,\n  Pie,\n  Cell,\n  AreaChart,\n  Area,\n  XAxis,\n  YAxis,\n  Tooltip,\n  ResponsiveContainer,\n  Legend,\n  BarChart,\n  Bar,\n  LineChart,\n  Line,\n} from 'recharts';\nimport { Row, Col, Statistic, Table } from 'antd';\n\nconst CartesianChart = ({ resultSet, children, ChartComponent }) => (\n  <ResponsiveContainer width=\"100%\" height={350}>\n    <ChartComponent data={resultSet.chartPivot()}>\n      <XAxis dataKey=\"x\" />\n      <YAxis />\n      <CartesianGrid />\n      {children}\n      <Legend />\n      <Tooltip />\n    </ChartComponent>\n  </ResponsiveContainer>\n);\n\nconst colors = ['#FF6492', '#141446', '#7A77FF'];\n\nconst stackedChartData = (resultSet) => {\n  const data = resultSet\n    .pivot()\n    .map(({ xValues, yValuesArray }) =>\n      yValuesArray.map(([yValues, m]) => ({\n        x: resultSet.axisValuesString(xValues, ', '),\n        color: resultSet.axisValuesString(yValues, ', '),\n        measure: m && Number.parseFloat(m),\n      }))\n    )\n    .reduce((a, b) => a.concat(b), []);\n  return data;\n};\n\nconst TypeToChartComponent = {\n  line: ({ resultSet }) => {\n    return (\n      <CartesianChart resultSet={resultSet} ChartComponent={LineChart}>\n        {resultSet.seriesNames().map((series, i) => (\n          <Line\n            key={series.key}\n            stackId=\"a\"\n            dataKey={series.key}\n            name={series.title}\n            stroke={colors[i]}\n          />\n        ))}\n      </CartesianChart>\n    );\n  },\n  bar: ({ resultSet }) => {\n    return (\n      <CartesianChart resultSet={resultSet} ChartComponent={BarChart}>\n        {resultSet.seriesNames().map((series, i) => (\n          <Bar\n            key={series.key}\n            stackId=\"a\"\n            dataKey={series.key}\n            name={series.title}\n            fill={colors[i]}\n          />\n        ))}\n      </CartesianChart>\n    );\n  },\n  area: ({ resultSet }) => {\n    return (\n      <CartesianChart resultSet={resultSet} ChartComponent={AreaChart}>\n        {resultSet.seriesNames().map((series, i) => (\n          <Area\n            key={series.key}\n            stackId=\"a\"\n            dataKey={series.key}\n            name={series.title}\n            stroke={colors[i]}\n            fill={colors[i]}\n          />\n        ))}\n      </CartesianChart>\n    );\n  },\n  pie: ({ resultSet }) => {\n    return (\n      <ResponsiveContainer width=\"100%\" height={350}>\n        <PieChart>\n          <Pie\n            isAnimationActive={false}\n            data={resultSet.chartPivot()}\n            nameKey=\"x\"\n            dataKey={resultSet.seriesNames()[0].key}\n            fill=\"#8884d8\"\n          >\n            {resultSet.chartPivot().map((e, index) => (\n              <Cell key={index} fill={colors[index % colors.length]} />\n            ))}\n          </Pie>\n          <Legend />\n          <Tooltip />\n        </PieChart>\n      </ResponsiveContainer>\n    );\n  },\n\n  number({ resultSet }) {\n    return (\n      <Row\n        type=\"flex\"\n        justify=\"center\"\n        align=\"middle\"\n        style={{\n          height: '100%',\n        }}\n      >\n        <Col>\n          {resultSet.seriesNames().map((s) => (\n            <Statistic value={resultSet.totalRow()[s.key]} />\n          ))}\n        </Col>\n      </Row>\n    );\n  },\n\n  table({ resultSet, pivotConfig }) {\n    return (\n      <Table\n        pagination={false}\n        columns={resultSet.tableColumns(pivotConfig)}\n        dataSource={resultSet.tablePivot(pivotConfig)}\n      />\n    );\n  },\n};\nexport default TypeToChartComponent;\n","import React from 'react';\nimport { Chart, Axis, Tooltip, Geom, Coord, Legend } from 'bizcharts';\nimport { Row, Col, Statistic, Table } from 'antd';\n\nconst stackedChartData = (resultSet) => {\n  const data = resultSet\n    .pivot()\n    .map(({ xValues, yValuesArray }) =>\n      yValuesArray.map(([yValues, m]) => ({\n        x: resultSet.axisValuesString(xValues, ', '),\n        color: resultSet.axisValuesString(yValues, ', '),\n        measure: m && Number.parseFloat(m),\n      }))\n    )\n    .reduce((a, b) => a.concat(b), []);\n  return data;\n};\n\nconst TypeToChartComponent = {\n  line: ({ resultSet }) => {\n    return (\n      <Chart\n        scale={{\n          x: {\n            tickCount: 8,\n          },\n        }}\n        height={400}\n        data={stackedChartData(resultSet)}\n        forceFit\n      >\n        <Axis name=\"x\" />\n        <Axis name=\"measure\" />\n        <Tooltip\n          crosshairs={{\n            type: 'y',\n          }}\n        />\n        <Geom type=\"line\" position=\"x*measure\" size={2} color=\"color\" />\n      </Chart>\n    );\n  },\n  bar: ({ resultSet }) => {\n    return (\n      <Chart\n        scale={{\n          x: {\n            tickCount: 8,\n          },\n        }}\n        height={400}\n        data={stackedChartData(resultSet)}\n        forceFit\n      >\n        <Axis name=\"x\" />\n        <Axis name=\"measure\" />\n        <Tooltip />\n        <Geom type=\"interval\" position=\"x*measure\" color=\"color\" />\n      </Chart>\n    );\n  },\n  area: ({ resultSet }) => {\n    return (\n      <Chart\n        scale={{\n          x: {\n            tickCount: 8,\n          },\n        }}\n        height={400}\n        data={stackedChartData(resultSet)}\n        forceFit\n      >\n        <Axis name=\"x\" />\n        <Axis name=\"measure\" />\n        <Tooltip\n          crosshairs={{\n            type: 'y',\n          }}\n        />\n        <Geom type=\"area\" position=\"x*measure\" size={2} color=\"color\" />\n      </Chart>\n    );\n  },\n  pie: ({ resultSet }) => {\n    return (\n      <Chart height={400} data={resultSet.chartPivot()} forceFit>\n        <Coord type=\"theta\" radius={0.75} />\n        {resultSet.seriesNames().map((s) => (\n          <Axis name={s.key} />\n        ))}\n        <Legend position=\"right\" />\n        <Tooltip />\n        {resultSet.seriesNames().map((s) => (\n          <Geom type=\"interval\" position={s.key} color=\"category\" />\n        ))}\n      </Chart>\n    );\n  },\n\n  number({ resultSet }) {\n    return (\n      <Row\n        type=\"flex\"\n        justify=\"center\"\n        align=\"middle\"\n        style={{\n          height: '100%',\n        }}\n      >\n        <Col>\n          {resultSet.seriesNames().map((s) => (\n            <Statistic value={resultSet.totalRow()[s.key]} />\n          ))}\n        </Col>\n      </Row>\n    );\n  },\n\n  table({ resultSet, pivotConfig }) {\n    return (\n      <Table\n        pagination={false}\n        columns={resultSet.tableColumns(pivotConfig)}\n        dataSource={resultSet.tablePivot(pivotConfig)}\n      />\n    );\n  },\n};\nexport default TypeToChartComponent;\n","import React from 'react';\nimport * as d3 from 'd3';\nimport { Row, Col, Statistic, Table } from 'antd';\nconst COLORS_SERIES = [\n  '#7A77FF',\n  '#141446',\n  '#FF6492',\n  '#727290',\n  '#43436B',\n  '#BEF3BE',\n  '#68B68C',\n  '#FFE7AA',\n  '#B2A58D',\n  '#64C8E0',\n];\nconst CHART_HEIGHT = 300;\n\nconst drawPieChart = (node, resultSet, options) => {\n  const data = resultSet.series()[0].series.map((s) => s.value);\n  const data_ready = d3.pie()(data);\n  d3.select(node).html(''); // The radius of the pieplot is half the width or half the height (smallest one).\n\n  const radius = CHART_HEIGHT / 2 - 40; // Seprate container to center align pie chart\n\n  const svg = d3\n    .select(node)\n    .append('svg')\n    .attr('width', node.clientWidth)\n    .attr('height', CHART_HEIGHT)\n    .append('g')\n    .attr(\n      'transform',\n      'translate(' + node.clientWidth / 2 + ',' + CHART_HEIGHT / 2 + ')'\n    );\n  svg\n    .selectAll('pieArcs')\n    .data(data_ready)\n    .enter()\n    .append('path')\n    .attr('d', d3.arc().innerRadius(0).outerRadius(radius))\n    .attr('fill', (d) => COLORS_SERIES[d.index]);\n  const size = 12;\n  const labels = resultSet.series()[0].series.map((s) => s.x);\n  svg\n    .selectAll('myrect')\n    .data(labels)\n    .enter()\n    .append('rect')\n    .attr('x', 150)\n    .attr('y', function (d, i) {\n      return -50 + i * (size + 5);\n    })\n    .attr('width', size)\n    .attr('height', size)\n    .style('fill', (d, i) => COLORS_SERIES[i]);\n  svg\n    .selectAll('mylabels')\n    .data(labels)\n    .enter()\n    .append('text')\n    .attr('x', 150 + size * 1.2)\n    .attr('y', function (d, i) {\n      return -50 + i * (size + 5) + size / 2;\n    })\n    .text(function (d) {\n      return d;\n    })\n    .attr('text-anchor', 'left')\n    .attr('font-size', '12px')\n    .style('alignment-baseline', 'middle');\n};\n\nconst drawChart = (node, resultSet, chartType, options = {}) => {\n  if (chartType === 'pie') {\n    return drawPieChart(node, resultSet, options);\n  }\n\n  const margin = {\n      top: 10,\n      right: 30,\n      bottom: 30,\n      left: 60,\n    },\n    width = node.clientWidth - margin.left - margin.right,\n    height = CHART_HEIGHT - margin.top - margin.bottom;\n  d3.select(node).html('');\n  const svg = d3\n    .select(node)\n    .append('svg')\n    .attr('width', width + margin.left + margin.right)\n    .attr('height', height + margin.top + margin.bottom)\n    .append('g')\n    .attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n  const keys = resultSet.seriesNames(options.pivotConfig).map((s) => s.key);\n  let data, maxData;\n\n  if (chartType === 'line') {\n    data = resultSet.series(options.pivotConfig).map((series) => ({\n      key: series.key,\n      values: series.series,\n    }));\n    maxData = d3.max(data.map((s) => d3.max(s.values, (i) => i.value)));\n  } else {\n    data = d3.stack().keys(keys)(resultSet.chartPivot(options.pivotConfig));\n    maxData = d3.max(data.map((s) => d3.max(s, (i) => i[1])));\n  }\n\n  const color = d3.scaleOrdinal().domain(keys).range(COLORS_SERIES);\n  let x;\n\n  if (chartType === 'bar') {\n    x = d3\n      .scaleBand()\n      .range([0, width])\n      .domain(resultSet.chartPivot(options.pivotConfig).map((c) => c.x))\n      .padding(0.3);\n  } else {\n    x = d3\n      .scaleTime()\n      .domain(\n        d3.extent(resultSet.chartPivot(options.pivotConfig), (c) =>\n          d3.isoParse(c.x)\n        )\n      )\n      .nice()\n      .range([0, width]);\n  }\n\n  svg\n    .append('g')\n    .attr('transform', 'translate(0,' + height + ')')\n    .call(d3.axisBottom(x));\n  const y = d3.scaleLinear().domain([0, maxData]).range([height, 0]);\n  svg.append('g').call(d3.axisLeft(y));\n\n  if (chartType === 'line') {\n    svg\n      .selectAll('.line')\n      .data(data)\n      .enter()\n      .append('path')\n      .attr('fill', 'none')\n      .attr('stroke', (d) => color(d.key))\n      .attr('stroke-width', 1.5)\n      .attr('d', (d) => {\n        return d3\n          .line()\n          .x((d) => x(d3.isoParse(d.x)))\n          .y((d) => y(+d.value))(d.values);\n      });\n  } else if (chartType === 'area') {\n    svg\n      .selectAll('mylayers')\n      .data(data)\n      .enter()\n      .append('path')\n      .style('fill', (d) => color(d.key))\n      .attr(\n        'd',\n        d3\n          .area()\n          .x((d) => x(d3.isoParse(d.data.x)))\n          .y0((d) => y(d[0]))\n          .y1((d) => y(d[1]))\n      );\n  } else {\n    svg\n      .append('g')\n      .selectAll('g') // Enter in the stack data = loop key per key = group per group\n      .data(data)\n      .enter()\n      .append('g')\n      .attr('fill', (d) => color(d.key))\n      .selectAll('rect') // enter a second time = loop subgroup per subgroup to add all rectangles\n      .data((d) => d)\n      .enter()\n      .append('rect')\n      .attr('x', (d) => x(d.data.x))\n      .attr('y', (d) => y(d[1]))\n      .attr('height', (d) => y(d[0]) - y(d[1]))\n      .attr('width', x.bandwidth());\n  }\n};\n\nconst D3Chart = ({ resultSet, type, ...props }) => (\n  <div ref={(el) => el && drawChart(el, resultSet, type, props)} />\n);\n\nconst TypeToChartComponent = {\n  line: (props) => {\n    return <D3Chart type=\"line\" {...props} />;\n  },\n  bar: (props) => {\n    return <D3Chart type=\"bar\" {...props} />;\n  },\n  area: (props) => {\n    return <D3Chart type=\"area\" {...props} />;\n  },\n  pie: (props) => {\n    return <D3Chart type=\"pie\" {...props} />;\n  },\n\n  number({ resultSet }) {\n    return (\n      <Row\n        type=\"flex\"\n        justify=\"center\"\n        align=\"middle\"\n        style={{\n          height: '100%',\n        }}\n      >\n        <Col>\n          {resultSet.seriesNames().map((s) => (\n            <Statistic value={resultSet.totalRow()[s.key]} />\n          ))}\n        </Col>\n      </Row>\n    );\n  },\n\n  table({ resultSet, pivotConfig }) {\n    return (\n      <Table\n        pagination={false}\n        columns={resultSet.tableColumns(pivotConfig)}\n        dataSource={resultSet.tablePivot(pivotConfig)}\n      />\n    );\n  },\n};\nexport default TypeToChartComponent;\n","import React from 'react';\nimport { Line, Bar, Pie } from 'react-chartjs-2';\nimport { Row, Col, Statistic, Table } from 'antd';\nconst COLORS_SERIES = ['#FF6492', '#141446', '#7A77FF'];\nconst TypeToChartComponent = {\n  line: ({ resultSet }) => {\n    const data = {\n      labels: resultSet.categories().map((c) => c.category),\n      datasets: resultSet.series().map((s, index) => ({\n        label: s.title,\n        data: s.series.map((r) => r.value),\n        borderColor: COLORS_SERIES[index],\n        fill: false,\n      })),\n    };\n    const options = {};\n    return <Line data={data} options={options} />;\n  },\n  bar: ({ resultSet }) => {\n    const data = {\n      labels: resultSet.categories().map((c) => c.category),\n      datasets: resultSet.series().map((s, index) => ({\n        label: s.title,\n        data: s.series.map((r) => r.value),\n        backgroundColor: COLORS_SERIES[index],\n        fill: false,\n      })),\n    };\n    const options = {\n      scales: {\n        xAxes: [\n          {\n            stacked: true,\n          },\n        ],\n      },\n    };\n    return <Bar data={data} options={options} />;\n  },\n  area: ({ resultSet }) => {\n    const data = {\n      labels: resultSet.categories().map((c) => c.category),\n      datasets: resultSet.series().map((s, index) => ({\n        label: s.title,\n        data: s.series.map((r) => r.value),\n        backgroundColor: COLORS_SERIES[index],\n      })),\n    };\n    const options = {\n      scales: {\n        yAxes: [\n          {\n            stacked: true,\n          },\n        ],\n      },\n    };\n    return <Line data={data} options={options} />;\n  },\n  pie: ({ resultSet }) => {\n    const data = {\n      labels: resultSet.categories().map((c) => c.category),\n      datasets: resultSet.series().map((s) => ({\n        label: s.title,\n        data: s.series.map((r) => r.value),\n        backgroundColor: COLORS_SERIES,\n        hoverBackgroundColor: COLORS_SERIES,\n      })),\n    };\n    const options = {};\n    return <Pie data={data} options={options} />;\n  },\n\n  number({ resultSet }) {\n    return (\n      <Row\n        type=\"flex\"\n        justify=\"center\"\n        align=\"middle\"\n        style={{\n          height: '100%',\n        }}\n      >\n        <Col>\n          {resultSet.seriesNames().map((s) => (\n            <Statistic value={resultSet.totalRow()[s.key]} />\n          ))}\n        </Col>\n      </Row>\n    );\n  },\n\n  table({ resultSet, pivotConfig }) {\n    return (\n      <Table\n        pagination={false}\n        columns={resultSet.tableColumns(pivotConfig)}\n        dataSource={resultSet.tablePivot(pivotConfig)}\n      />\n    );\n  },\n};\nexport default TypeToChartComponent;\n","import { useState, useEffect } from 'react';\nimport 'antd/dist/antd.css';\nimport '@ant-design/compatible';\nimport { getCodesandboxFiles, getDependencies } from './codegen';\nimport ChartContainer from './ChartContainer';\nimport RechartsCharts from './recharts-charts/src/components/ChartRenderer';\nimport BizchartsCharts from './bizcharts-charts/src/components/ChartRenderer';\nimport D3Charts from './d3-charts/src/components/ChartRenderer';\nimport ChartjsCharts from './chartjs-charts/src/components/ChartRenderer';\n\n/*\nconst libs = {};\n*/\nconst libs = {\n  recharts: RechartsCharts,\n  bizcharts: BizchartsCharts,\n  d3: D3Charts,\n  chartjs: ChartjsCharts\n};\n\nconst App = () => {\n  const [query, setQuery] = useState(null);\n  const [pivotConfig, setPivotConfig] = useState(null);\n  const [library, setLibrary] = useState(null);\n  const [chartType, setChartType] = useState(null);\n  useEffect(() => {\n    window['__cubejs'] = {\n      getCodesandboxFiles,\n      getDependencies\n    };\n    window.dispatchEvent(new CustomEvent('cubejsChartReady'));\n    window.addEventListener('cubejs', event => {\n      const {\n        query,\n        chartingLibrary,\n        chartType,\n        pivotConfig\n      } = event.detail;\n\n      if (query) {\n        setQuery(query);\n      }\n\n      if (pivotConfig) {\n        setPivotConfig(pivotConfig);\n      }\n\n      if (chartingLibrary) {\n        setLibrary(chartingLibrary);\n      }\n\n      if (chartType) {\n        setChartType(chartType);\n      }\n    });\n  }, []);\n  return <div className=\"App\">\n      {libs[library]?.[chartType] ? <ChartContainer renderFunction={libs[library][chartType]} query={query} pivotConfig={pivotConfig} /> : null}\n    </div>;\n};\n\nconst API_URL = 'http://localhost:4000/cubejs-api/v1';\nconst CUBEJS_TOKEN = 'secret';\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}